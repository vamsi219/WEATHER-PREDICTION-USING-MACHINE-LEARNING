# -*- coding: utf-8 -*-
"""WEATHER_PREDICTION_RIDGE_CLASSIFIER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HAUYSnVJvM0i7m1RJQvrIxKY_0cZmXxv

**IMPORTING LIBRARIES**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Ridge,Lasso,LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

weather = pd.read_csv("Weather_Jodhpur.csv", index_col="DATE")

weather

"""**CLEANING AND FILLING MISSING DATA**"""

#Filling missing values in each column with mode because the data we are having is a skewed data

weather['tavg'] = weather['tavg'].fillna(weather['tavg'].mode()[0])
weather['tmax'] = weather['tmax'].fillna(weather['tmax'].mode()[0])
weather['tmin'] = weather['tmin'].fillna(weather['tmin'].mode()[0])
weather['prcp'] = weather['prcp'].fillna(weather['prcp'].mode()[0])

weather

weather.dtypes

weather.index

weather.index=pd.to_datetime(weather.index)

weather.index #Converting datatype from index to datetime format

weather["tmax"].plot()

"""OUR ALGORITHM IS TO FIND TOMORROW'S TEMPERATURE. SO WE ADD TARGET COLUMN WHICH HAS TOMORROWS TEMPERATURE FOR EACH DAY AS THE TARGET VALUE"""

weather["target"] = weather.shift(-1)["tmax"]

weather

weather.drop(weather.tail(1).index,inplace = True) #Since for the last day we dont have future value we remove that row

"""Now lets check correlation between all these factors"""

weather.corr()

predictors = weather.columns[~weather.columns.isin(["target"])]

predictors

"""We are trying to predict the values. But inorder to estimate the error of this machine learning model. We need to use techniques like cross validation. But since our data is time series data. It is better to use backtesting """

def backtest(weather, model, predictors, start=3650, step=90):
    all_predictions = []

#It is just like sliding window algorithm type
    for i in range(start, weather.shape[0], step):
        train = weather.iloc[:i,:]
        test = weather.iloc[i:(i+step),:]
        
        model.fit(train[predictors], train["target"])
        preds = model.predict(test[predictors])
        preds = pd.Series(preds, index=test.index)
        combined = pd.concat([test["target"], preds], axis=1)
        combined.columns = ["actual", "prediction"]
        combined["diff"] = (combined["prediction"] - combined["actual"]).abs()
        
        all_predictions.append(combined)
    return pd.concat(all_predictions)

target_arr = np.array(weather.target[3650:])

"""**LINEAR REGRESSION** """

lin = LinearRegression()

predictions_lin = backtest(weather, lin, predictors)

predictions_lin

predict_lin = np.array(predictions_lin["prediction"])

"""**Result: Linear Regression**"""

mean_absolute_error(target_arr,predict_lin)

"""THAT MEANS ON AVG WE ARE 0.96 DEG OFF FROM ACTUAL AVG TEMPERATURE WHILE USING RIDGE MODEL TO PREDICT THE FUTURE TEMPERATURES"""

print(r2_score(target_arr,predict_lin))

"""Plotting the graph"""

plt.plot(np.array(predictions_lin.index), target_arr, color='r', label='Actual')
plt.plot(np.array(predictions_lin.index), predict_lin, color = 'c', label='Predicted')
  
plt.xlabel("DATE")
plt.ylabel("Tmax")
plt.title("Using Linear Regression: Actual vs Predicted")
  
plt.legend()
  
plt.show()

"""**RIDGE REGRESSION**"""

ridg = Ridge()

predictions_ridg = backtest(weather, ridg, predictors)
predictions_ridg

predict_ridg = np.array(predictions_ridg["prediction"])

"""**Result: Ridge Regression**"""

mean_absolute_error(target_arr,predict_ridg)

print(r2_score(target_arr,predict_ridg))

plt.plot(np.array(predictions_ridg.index), target_arr, color='r', label='Actual')
plt.plot(np.array(predictions_ridg.index), predict_ridg, color = 'c', label='Predicted')
  
plt.xlabel("DATE")
plt.ylabel("Tmax")
plt.title("Using Ridge Regression: Actual vs Predicted")
  
plt.legend()
  
plt.show()

"""**LASSO REGRESSION** """

lass = Lasso()

predictions_lass = backtest(weather, lass, predictors)

predictions_lass

predict_lass = np.array(predictions_lass["prediction"])

"""**Result: Lasso Regression**"""

mean_absolute_error(target_arr,predict_lass)

"""THAT MEANS ON AVG WE ARE 1.09 DEG OFF FROM ACTUAL AVG TEMPERATURE WHILE USING RIDGE MODEL TO PREDICT THE FUTURE TEMPERATURES"""

print(r2_score(target_arr,predict_lass))

"""Plotting the graph"""

plt.plot(np.array(predictions_lass.index), target_arr, color='r', label='Actual')
plt.plot(np.array(predictions_lass.index), predict_lass, color = 'c', label='Predicted')
  
plt.xlabel("DATE")
plt.ylabel("Tmax")
plt.title("Using Lasso Regression: Actual vs Predicted")
  
plt.legend()
  
plt.show()

